/* 隐式转换 隐式转换仅在表达式的计算过程中生效，原始的整型变量的类型不会改变。
 * 表达式中的转换被设计成尽可能避免损失精度，小整型转化为大整型,整型->浮点型
 * 以下几种类型整型被初始化为浮点型
 * 参与算术运算时。
 * 作为参数传递给接受浮点型参数的函数时。
 * 赋值给浮点型变量时。
 * 在表达式中与浮点型混合时。
 *
 * 初始值时被初始化的对象不能改变类型，初始值只能被转换为初始化对象的类型,会损失精度
 * 赋值表达式右侧运算对象转换成左侧运算对象的类型
 * 非布尔值转换成布尔值
 */
#include<iostream>
using namespace std;
int main()
{
    int i = 3.14;            //初始化只能转换成初始化对象的类型，去除.14损失精度；
    double c = 3.14;
    c = c + i;              //i被隐式转换成浮点型，算数运算结束后又转换回整型
    double c1 = c + i;      //作为参数传递给接受浮点型参数的函数时。
    c1 = i;                 //赋值给浮点型变量时。
    cout << c << endl;
    if (i){
        cout << "非布尔转换成布尔，非0为真，i = 3，输出这句话" << endl;
    }
    return 0;
}